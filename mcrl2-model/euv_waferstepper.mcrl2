map RackSize: Nat;
eqn RackSize = 3;

map NumWafers: Nat;
eqn NumWafers = 3;

map test:Int;

map OnRack: Nat -> Bool;
var n:Nat;
eqn
	( n >= 0 && n < RackSize ) -> OnRack( n ) = true;
	( n < 0 || n >= RackSize ) -> OnRack( n ) = false;

sort Wafer = struct wafer( id:Int, treated:Bool );

map Dummy : Wafer;
eqn Dummy = wafer( -1, false );

map IsTreated : Wafer -> Bool;
var t:Bool;
	n:Int;
eqn IsTreated(wafer(n, t)) = t;

map IsDummy : Wafer -> Bool;
var t:Bool;
	n:Int;
eqn (n == -1) -> IsDummy( wafer( n, t ) ) = true;
	(n != -1) -> IsDummy( wafer( n, t ) ) = false;

sort WaferSet = Set( Wafer );
sort WaferList = List( Wafer );
map  InitWaferList: Nat -> WaferList;
var  n : Nat;
eqn  InitWaferList(0)     = [];
0 < n -> InitWaferList(n) = wafer( n, false ) |> InitWaferList( max( n - 1, 0 ) );

%Define robot constants
sort RobotID = struct Ra | Rb | Rc;
sort SluiceID = struct S0 | S1;

act
	%Vital steps
	TreatWafer : Wafer; %Treat a wafer
	TakeWafer : RobotID # Wafer; %Robot takes wafer
	DepositWafer : Wafer; %Robot reposits wafer
	PutBackWafer : Wafer; %Robot reposits wafer

	%Communication steps
	S2R : RobotID # SluiceID # Wafer;
	R2S : RobotID # SluiceID # Wafer;
	P2R : Wafer;
	R2P : Wafer;

	R2Rack : RobotID # Nat # Wafer;
	Rack2R : RobotID # Nat # Wafer;

	%Comm parts
	S2R_R, S2R_S : RobotID # SluiceID # Wafer; %Sluices to robot
	R2S_R, R2S_S : RobotID # SluiceID # Wafer; %Robot to sluices
	R2P_R, R2P_P : Wafer; %Robot to projector
	P2R_R, P2R_P: Wafer; %Projector to robot
	R2Rack_R, R2Rack_Rack : RobotID # Nat # Wafer;
	Rack2R_R, Rack2R_Rack : RobotID # Nat # Wafer;

	CloseInnerDoor: SluiceID;
	CloseOuterDoor: SluiceID;
	OpenInnerDoor: SluiceID;
	OpenOuterDoor: SluiceID;
	PumpVacuum: SluiceID;
	ReleaseVacuum: SluiceID;

	SluiceBroken : SluiceID;

	RobotToRack : RobotID # Wafer;
	RobotFromRack : RobotID # Wafer;

map TreatedWafer : Wafer -> Wafer;
var n:Int;
	b:Bool;
eqn
	TreatedWafer(wafer(n,false)) = wafer( n,true ); 

sort SluiceDoorState = struct inner_open | closed | outer_open; 

map PutInList : List( Wafer ) # Int # Wafer -> List( Wafer );
var l:List( Wafer );
	p:Int;
	w:Wafer;
eqn PutInList([], p, w) = [];
	(#l > 0 && #l-1 == RackSize - p - 1) -> PutInList( l, p, w ) = w |> PutInList( tail( l ), p, w );
	(#l > 0 && #l-1 != RackSize - p - 1) -> PutInList( l, p, w ) = head( l ) |> PutInList( tail( l ), p, w ); 

proc
	%RobotHandler
	R( rID:RobotID, occupied:Bool, w:Wafer, input:WaferList, output:WaferSet ) =
		( rID == Ra ) -> (
			occupied -> (
				 ( IsTreated( w ) ) -> DepositWafer( w ) . R( rID, false, Dummy, input, output + {w} )
				<> ( sum s:SluiceID . R2S_R( rID, s, w ) . R( rID, false, Dummy, input, output ) +
				PutBackWafer( w ) . R( rID, false, Dummy, input <| w, output ) )
			)
			<> (
				( input != [] ) -> TakeWafer( rID, head( input ) ) . R( rID, true, head(input), tail(input), output ) +
				sum w2:Wafer, s:SluiceID . S2R_R( rID, s, w2 ) . R( rID, true, w2, input, output )
			)
		) + 
		( rID == Rb ) -> (
			occupied -> (
				( IsTreated( w ) ) -> sum s:SluiceID . R2S_R( rID, s, w ) . R( rID, false, Dummy, input, output )
				<> sum p:Nat . ( OnRack( p ) ) -> R2Rack_R( rID, p, w ) . R( rID, false, Dummy, input, output )
			)
			<> (
				sum w2:Wafer, s:SluiceID . S2R_R( rID, s, w2 ) . R( rID, true, w2, input, output ) +
				sum w2:Wafer, p:Nat . ( IsTreated( w2 ) && OnRack( p ) ) -> Rack2R_R( rID, p, w2 ) . R( rID, true, w2, input, output )
			)
		) +
		( rID == Rc ) -> (
			occupied -> 
				( R2P_R( w ) . P2R_R( TreatedWafer( w ) ) . sum p:Nat . ( OnRack( p ) ) -> R2Rack_R( rID, p, TreatedWafer( w ) ) . R( rID, false, Dummy, input, output ) )
			<>
				sum w2:Wafer, p:Nat . ( !IsTreated( w2 ) && OnRack( p ) ) -> Rack2R_R( rID, p, w2 ) . R( rID, true, w2, input, output )
		)
	;

	%SluiceHandler
	S( id:SluiceID, occupied:Bool, w:Wafer, door:SluiceDoorState, broken:Bool ) =
		(!broken) -> (
			((!occupied) -> (
				(door == outer_open ) -> sum w2:Wafer . R2S_S( Ra, id, w2 ) . CloseOuterDoor( id ) . PumpVacuum( id ) . S( id, true, w2, closed, false ) +
				(door == inner_open ) -> sum w2:Wafer . R2S_S( Rb, id, w2 ) . CloseInnerDoor( id ) . ReleaseVacuum( id ) . S( id, true, w2, closed, false )
			) <> (
				(door == outer_open ) -> S2R_S( Ra, id, w ) . S( id, false, Dummy, door, false ) + 
				(door == inner_open ) -> S2R_S( Rb, id, w ) . S( id, false, Dummy, door, false )
			)) +
			(door == closed && IsTreated( w )) -> OpenOuterDoor( id ) . S( id, occupied, w, outer_open, false ) +
			(door == closed && !IsTreated( w )) -> OpenInnerDoor( id ) . S( id, occupied, w, inner_open, false ) +
			SluiceBroken( id ) . S( id, occupied, w, door, true )
		)
	;

	%Projector
	P( occupied : Bool, w : Wafer ) =
		occupied ->
			TreatWafer( w ) . P2R_P( TreatedWafer( w ) ).P( false, Dummy )
		<>
			sum w2:Wafer . R2P_P( w2 ) . P( true, w2 )
	;

	%Rack
	Rack( wl : List( Wafer ) ) =
		sum w:Wafer, p:Nat, r:RobotID . ( OnRack( p ) ) -> ( IsDummy( wl . p ) ) -> R2Rack_Rack( r, p, w ) . Rack( PutInList( wl, p, w ) ) +
		sum p:Nat, r:RobotID . ( OnRack( p ) ) -> ( !IsDummy( wl . p ) ) -> Rack2R_Rack( r, p, wl . p ) . Rack( PutInList( wl, p, Dummy ) )
	;

map inputList : List( Wafer );
eqn inputList = InitWaferList( NumWafers );

map output : Set( Wafer );
eqn output = {};

map InitRack : Nat -> List( Wafer );
var n:Nat;
eqn InitRack( 0 ) = [];
0 < n -> InitRack( n ) = InitRack( max( n - 1, 0 ) ) <| Dummy;

init
	%hide({ R2S, S2R, R2P, P2R },
		allow({ R2S, S2R, R2P, P2R, R2Rack, Rack2R, TreatWafer, TakeWafer, DepositWafer, CloseOuterDoor, CloseInnerDoor, 
		OpenInnerDoor, OpenOuterDoor, PumpVacuum, ReleaseVacuum, RobotToRack, RobotFromRack, PutBackWafer },
			comm({ R2S_R|R2S_S -> R2S, S2R_S|S2R_R -> S2R, R2P_R|R2P_P -> R2P, P2R_P|P2R_R -> P2R, R2Rack_R|R2Rack_Rack -> R2Rack, Rack2R_Rack|Rack2R_R -> Rack2R },
				R( Ra, false, Dummy, inputList, output ) ||
				R( Rb, false, Dummy, inputList, output ) ||
				R( Rc, false, Dummy, inputList, output ) ||
				Rack( InitRack( RackSize ) ) ||
				S( S0, false, Dummy, outer_open, false ) ||
				S( S1, false, Dummy, outer_open, false ) ||
				P( false, Dummy )
			)
		%)
	);
map RackSize: Nat;
eqn RackSize = 3;

map NumWafers: Nat;
eqn NumWafers = 5;

map NumSluices: Nat;
eqn NumSluices = 2;

map test:Int;

map OnRack: Nat -> Bool;
var n:Nat;
eqn
	( n >= 0 && n < RackSize ) -> OnRack( n ) = true;
	( n < 0 || n >= RackSize ) -> OnRack( n ) = false;

sort Wafer = struct wafer( id:Int, treated:Bool );

map Dummy : Wafer;
eqn Dummy = wafer( -1, false );

map IsTreated : Wafer -> Bool;
var t:Bool;
	n:Int;
eqn IsTreated(wafer(n, t)) = t;

map IsDummy : Wafer -> Bool;
var t:Bool;
	n:Int;
eqn (n == -1) -> IsDummy( wafer( n, t ) ) = true;
	(n != -1) -> IsDummy( wafer( n, t ) ) = false;

sort WaferSet = Set( Wafer );
sort WaferList = List( Wafer );
map  InitWaferList: Nat -> WaferList;
var  n : Nat;
eqn  InitWaferList(0)     = [];
0 < n -> InitWaferList(n) = wafer( n, false ) |> InitWaferList( max( n - 1, 0 ) );

%Define robot constants
sort RobotID = struct Ra | Rb | Rc;
sort SluiceID = struct S0 | S1;

act
	%Robot actions - communications
	RobotFromSluice : RobotID # SluiceID # Wafer;
	RobotToSluice : RobotID # SluiceID # Wafer;
	RobotToProjector : Wafer;
	RobotFromProjector : Wafer;
	RobotToRack : RobotID # Nat # Wafer;
	RobotFromRack : RobotID # Nat # Wafer;
	RobotFromInput : RobotID # Wafer; %Robot takes wafer
	RobotToOutput : Wafer; %Robot deposits wafer on output
	RobotToInput : Wafer; %Robot reposits wafer

	%Sluice actions
	CloseInnerDoor: SluiceID;
	CloseOuterDoor: SluiceID;
	OpenInnerDoor: SluiceID;
	OpenOuterDoor: SluiceID;
	PumpVacuum: SluiceID;
	ReleaseVacuum: SluiceID;
	SluiceBroken : SluiceID;

	%Projector actions
	TreatWafer : Wafer; %Treat a wafer

	%Communication components
	RReset_O, RReset_D : RobotID;
	S2R_R, S2R_S : RobotID # SluiceID # Wafer; %Sluices to robot
	R2S_R, R2S_S : RobotID # SluiceID # Wafer; %Robot to sluices
	R2P_R, R2P_P : Wafer; %Robot to projector
	P2R_R, P2R_P: Wafer; %Projector to robot
	R2Rack_R, R2Rack_Rack : RobotID # Nat # Wafer;
	Rack2R_R, Rack2R_Rack : RobotID # Nat # Wafer;

	%Events
	RobotReset: RobotID;
	OuterDoorOpened : SluiceID;
	InnerDoorOpened : SluiceID;
	OuterDoorClosed : SluiceID;
	InnerDoorClosed : SluiceID;
	VacuumDone : SluiceID;
	VacuumReleased : SluiceID;
	WaferTreated : Wafer;

map TreatedWafer : Wafer -> Wafer;
var n:Int;
	b:Bool;
eqn
	TreatedWafer(wafer(n,false)) = wafer( n,true ); 

sort SluiceDoorState = struct inner_open | closed | outer_open; 

map PutInList : List( Wafer ) # Int # Wafer -> List( Wafer );
var l:List( Wafer );
	p:Int;
	w:Wafer;
eqn PutInList([], p, w) = [];
	(#l > 0 && #l-1 == RackSize - p - 1) -> PutInList( l, p, w ) = w |> PutInList( tail( l ), p, w );
	(#l > 0 && #l-1 != RackSize - p - 1) -> PutInList( l, p, w ) = head( l ) |> PutInList( tail( l ), p, w ); 

proc
	%RobotHandler
	R( rID:RobotID, occupied:Bool, w:Wafer, input:WaferList, output:WaferSet, counter:Int ) =
		( rID == Ra ) -> (
			occupied -> (
				( IsTreated( w ) ) -> RobotToOutput( w ) . RobotReset( rID ) . R( rID, false, Dummy, input, output + {w}, counter )
				<> ( sum s:SluiceID . R2S_R( rID, s, w ) . RReset_O( rID ) . R( rID, false, Dummy, input, output, counter + 1 ) )
			)
			<> (
				( input != [] && counter < NumSluices ) -> RobotFromInput( rID, head( input ) ) . RobotReset( rID ) . R( rID, true, head(input), tail(input), output, counter ) +
				sum w2:Wafer, s:SluiceID . S2R_R( rID, s, w2 ) . RReset_D( rID ) . R( rID, true, w2, input, output, counter - 1 )
			)
		) + 
		( rID == Rb ) -> (
			occupied -> (
				( IsTreated( w ) ) -> sum s:SluiceID . R2S_R( rID, s, w ) . RReset_O( rID ) . R( rID, false, Dummy, input, output, counter )
				<> sum p:Nat . ( OnRack( p ) ) -> R2Rack_R( rID, p, w ) . RReset_O( rID ) . R( rID, false, Dummy, input, output, counter )
			)
			<> (
				sum w2:Wafer, s:SluiceID . S2R_R( rID, s, w2 ) . RReset_D( rID ) . R( rID, true, w2, input, output, counter ) +
				sum w2:Wafer, p:Nat . ( IsTreated( w2 ) && OnRack( p ) ) -> Rack2R_R( rID, p, w2 ) . RReset_D( rID ) . R( rID, true, w2, input, output, counter )
			)
		) +
		( rID == Rc ) -> (
			occupied -> 
				( R2P_R( w ) . RReset_O( rID ) . P2R_R( TreatedWafer( w ) ) . RReset_D( rID ) . sum p:Nat . ( OnRack( p ) ) -> R2Rack_R( rID, p, TreatedWafer( w ) ) . RReset_O( rID ) . R( rID, false, Dummy, input, output, counter ) )
			<>
				sum w2:Wafer, p:Nat . ( !IsTreated( w2 ) && OnRack( p ) ) -> Rack2R_R( rID, p, w2 ) . RReset_D( rID ) . R( rID, true, w2, input, output, counter )
		)
	;

	%SluiceHandler
	S( id:SluiceID, occupied:Bool, w:Wafer, door:SluiceDoorState, broken:Bool ) =
		(!broken) -> (
			((!occupied) -> (
				(door == outer_open ) -> sum w2:Wafer . R2S_S( Ra, id, w2 ) . RReset_D( Ra ) . CloseOuterDoor( id ) . OuterDoorClosed( id ) . PumpVacuum( id ) . VacuumDone( id ) . S( id, true, w2, closed, false ) +
				(door == inner_open ) -> sum w2:Wafer . R2S_S( Rb, id, w2 ) . RReset_D( Rb ) . CloseInnerDoor( id ) . InnerDoorClosed( id ) . ReleaseVacuum( id ) . VacuumReleased( id ) . S( id, true, w2, closed, false )
			) <> (
				(door == outer_open ) -> S2R_S( Ra, id, w ) . RReset_O( Ra ) . S( id, false, Dummy, door, false ) + 
				(door == inner_open ) -> S2R_S( Rb, id, w ) . RReset_O( Rb ) . S( id, false, Dummy, door, false )
			)) +
			(door == closed && IsTreated( w )) -> OpenOuterDoor( id ) . OuterDoorOpened( id ) . S( id, occupied, w, outer_open, false ) +
			(door == closed && !IsTreated( w )) -> OpenInnerDoor( id ) . InnerDoorOpened( id ) . S( id, occupied, w, inner_open, false ) +
			SluiceBroken( id ) . S( id, occupied, w, door, true )
		)
	;

	%Projector
	P( occupied : Bool, w : Wafer ) =
		occupied ->
			TreatWafer( w ) . WaferTreated( w ) . P2R_P( TreatedWafer( w ) ) . RReset_O( Rc ) . P( false, Dummy )
		<>
			sum w2:Wafer . R2P_P( w2 ) . RReset_D( Rc ) . P( true, w2 )
	;

	%Rack
	Rack( wl : List( Wafer ) ) =
		sum w:Wafer, p:Nat, r:RobotID . ( OnRack( p ) ) -> ( IsDummy( wl . p ) ) -> R2Rack_Rack( r, p, w ) . RReset_D( r ) . Rack( PutInList( wl, p, w ) ) +
		sum p:Nat, r:RobotID . ( OnRack( p ) ) -> ( !IsDummy( wl . p ) ) -> Rack2R_Rack( r, p, wl . p ) . RReset_O( r ) . Rack( PutInList( wl, p, Dummy ) )
	;

map inputList : List( Wafer );
eqn inputList = InitWaferList( NumWafers );

map output : Set( Wafer );
eqn output = {};

map InitRack : Nat -> List( Wafer );
var n:Nat;
eqn InitRack( 0 ) = [];
0 < n -> InitRack( n ) = InitRack( max( n - 1, 0 ) ) <| Dummy;

init
	%hide({ R2S, S2R, R2P, P2R },
		allow({ RobotToSluice, RobotFromSluice, RobotToProjector, RobotFromProjector, RobotToRack, RobotFromRack, TreatWafer, 
		RobotFromInput, RobotToOutput, CloseOuterDoor, CloseInnerDoor, 
		OpenInnerDoor, OpenOuterDoor, PumpVacuum, ReleaseVacuum, RobotToInput,
		RobotReset, WaferTreated, OuterDoorOpened, OuterDoorClosed, InnerDoorOpened, InnerDoorClosed, VacuumDone, VacuumReleased },
			comm({ R2S_R|R2S_S -> RobotToSluice, S2R_S|S2R_R -> RobotFromSluice, R2P_R|R2P_P -> RobotToProjector, P2R_P|P2R_R -> RobotFromProjector, 
				R2Rack_R|R2Rack_Rack -> RobotToRack, Rack2R_Rack|Rack2R_R -> RobotFromRack, RReset_O|RReset_D -> RobotReset },
				R( Ra, false, Dummy, inputList, output, 0 ) ||
				R( Rb, false, Dummy, inputList, output, 0 ) ||
				R( Rc, false, Dummy, inputList, output, 0 ) ||
				Rack( InitRack( RackSize ) ) ||
				S( S0, false, Dummy, outer_open, false ) ||
				S( S1, false, Dummy, outer_open, false ) ||
				P( false, Dummy )
			)
		%)
	);
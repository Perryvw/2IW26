sort Wafer = struct wafer( Id : Int, treated:Bool );

map Dummy : Wafer;
eqn Dummy = wafer( -1, false );

map IsTreated : Wafer -> Bool;
var id:Int;
	t:Bool;
eqn IsTreated(wafer(id,t)) = t;

sort WaferSet = Set( Wafer );
sort WaferList = List( Wafer );
map  InitWaferList: Nat -> WaferList;
var  n : Nat;
eqn  InitWaferList(0)     = [];
0 < n -> InitWaferList(n) = wafer( n, false ) |> InitWaferList( max( n - 1, 0 ) );

%Define robot constants
sort RobotID = struct Ra | Rb | Rc;
sort SluiceID = struct S0 | S1;

act
	%Vital steps
	TreatWafer : Wafer; %Treat a wafer
	TakeWafer : RobotID # Wafer; %Robot takes wafer
	DepositWafer : Wafer; %Robot reposits wafer

	%Communication steps
	S2R : RobotID # SluiceID # Wafer;
	R2S : RobotID # SluiceID # Wafer;
	P2R : Wafer;
	R2P : Wafer;

	R2Rack : RobotID # Wafer;
	Rack2R : RobotID # Wafer;

	%Comm parts
	S2R_R, S2R_S : RobotID # SluiceID # Wafer; %Sluices to robot
	R2S_R, R2S_S : RobotID # SluiceID # Wafer; %Robot to sluices
	R2P_R, R2P_P : Wafer; %Robot to projector
	P2R_R, P2R_P: Wafer; %Projector to robot
	R2Rack_R, R2Rack_Rack : RobotID # Wafer;
	Rack2R_R, Rack2R_Rack : RobotID # Wafer;

	CloseInnerDoor: SluiceID;
	CloseOuterDoor: SluiceID;
	OpenInnerDoor: SluiceID;
	OpenOuterDoor: SluiceID;
	PumpVacuum: SluiceID;
	ReleaseVacuum: SluiceID;

	WaferOnRack : RobotID # Wafer;
	WaferFromRack : RobotID # Wafer;

	Test;

map TreatedWafer : Wafer -> Wafer;
var n:Int;
	b:Bool;
eqn
	TreatedWafer(wafer(n, b)) = wafer( n, true ); 

sort SluiceDoorState = struct inner_open | closed | outer_open; 

proc
	%RobotHandler
	R( rID:RobotID, occupied:Bool, w:Wafer, input:WaferList, output:WaferSet ) =
		( rID == Ra ) -> (
			occupied -> (
				( IsTreated( w ) ) -> DepositWafer( w ) . R( rID, false, Dummy, input, output + {w} )
				<> sum s:SluiceID . R2S_R( rID, s, w ) . R( rID, false, Dummy, input, output )
			)
			<> (
				( input != [] ) -> TakeWafer( rID, head( input ) ) . R( rID, true, head(input), tail(input), output ) +
				sum w2:Wafer, s:SluiceID . S2R_R( rID, s, w2 ) . R( rID, true, w2, input, output )
			)
		) + 
		( rID == Rb ) -> (
			occupied -> (
				( IsTreated( w ) ) -> sum s:SluiceID . R2S_R( rID, s, w ) . R( rID, false, Dummy, input, output )
				<> R2Rack_R( rID, w ) . R( rID, false, Dummy, input, output )
			)
			<> (
				sum w2:Wafer, s:SluiceID . S2R_R( rID, s, w2 ) . R( rID, true, w2, input, output ) +
				sum w2:Wafer . ( IsTreated( w2 ) ) -> Rack2R_R( rID, w2 ) . R( rID, true, w2, input, output )
			)
		) +
		( rID == Rc ) -> (
			occupied -> 
				( R2P_R( w ) . P2R_R( TreatedWafer( w ) ) . R2Rack_R( rID, TreatedWafer( w ) ) . R( rID, false, w, input, output ) )
			<>
				sum w2:Wafer . ( !IsTreated( w2 ) ) -> Rack2R_R( rID, w2 ) . R( rID, true, w2, input, output )
		)
	;

	%SluiceHandler
	S( id:SluiceID, occupied:Bool, w:Wafer, door:SluiceDoorState ) =
		((!occupied) -> (
			(door == outer_open ) -> sum w2:Wafer . R2S_S( Ra, id, w2 ) . CloseOuterDoor( id ) . PumpVacuum( id ) . S( id, true, w2, closed ) +
			(door == inner_open ) -> sum w2:Wafer . R2S_S( Rb, id, w2 ) . CloseInnerDoor( id ) . ReleaseVacuum( id ) . S( id, true, w2, closed )
		) <> (
			(door == outer_open ) -> S2R_S( Ra, id, w ) . S( id, false, Dummy, door ) + 
			(door == inner_open ) -> S2R_S( Rb, id, w ) . S( id, false, Dummy, door )
		)) +
		(door == closed && IsTreated( w )) -> OpenOuterDoor( id ) . S( id, occupied, w, outer_open ) +
		(door == closed && !IsTreated( w )) -> OpenInnerDoor( id ) . S( id, occupied, w, inner_open )
	;

	%Projector
	P( occupied : Bool, w : Wafer ) =
		occupied ->
			TreatWafer( w ) . P2R_P( TreatedWafer( w ) ).P( false, Dummy )
		<>
			sum w:Wafer . R2P_P( w ) . P( true, w )
	;

	%Rack
	Rack( wl: Set( Wafer ) ) =
		sum w:Wafer, r:RobotID . R2Rack_Rack( r, w ) . Rack( wl + {w} ) +
		sum w:Wafer, r:RobotID . ( w in wl ) -> Rack2R_Rack( r, w ) . Rack( wl - {w} )
	;

map inputList : List( Wafer );
eqn inputList = InitWaferList( 3 );

map output : Set( Wafer );
eqn output = {};

init
	%hide({ R2S, S2R, R2P, P2R },
		allow({ R2S, S2R, R2P, P2R, R2Rack, Rack2R, TreatWafer, TakeWafer, DepositWafer, CloseOuterDoor, CloseInnerDoor, 
		OpenInnerDoor, OpenOuterDoor, PumpVacuum, ReleaseVacuum, WaferOnRack, WaferFromRack, Test },
			comm({ R2S_R|R2S_S -> R2S, S2R_S|S2R_R -> S2R, R2P_R|R2P_P -> R2P, P2R_P|P2R_R -> P2R, R2Rack_R|R2Rack_Rack -> R2Rack, Rack2R_Rack|Rack2R_R -> Rack2R },
				R( Ra, false, Dummy, inputList, output ) ||
				R( Rb, false, Dummy, inputList, output ) ||
				R( Rc, false, Dummy, inputList, output ) ||
				Rack( {} ) ||
				S( S0, false, Dummy, outer_open ) ||
				S( S1, false, Dummy, outer_open ) ||
				P( false, Dummy )
			)
		%)
	);